{"version":3,"sources":["utils/firebase.js","components/ImageUpload.jsx","components/Image.jsx","components/Gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","database","ImageUpload","props","handleFileChange","evt","file","target","files","type","includes","image","setState","alert","value","handleNameChange","name","getUploadingProcent","snapshot","Math","round","bytesTransferred","totalBytes","handleUpload","state","inputName","ref","put","on","procent","loadingStatus","error","console","log","a","child","getDownloadURL","url","set","handleUpdate","style","ImageUploader","this","FileLoader","onChange","UploadButton","onClick","Component","backgroundColor","fontWeight","color","padding","textDecoration","borderRadius","background","transition","width","boxSizing","Container","display","height","margin","textAlign","borderColor","borderStyle","h1","fontSize","Image","src","alt","deleteImage","Gallery","needUpdate","componentDidMount","getImagesFromDatabase","componentDidUpdate","images","forEach","item","push","val","loading","find","refFromURL","delete","remove","map","index","key","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iVAeAA,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAUV,IAASU,UACnBC,EAAWX,IAASW,WCwFXC,E,YAtGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,iBAAmB,SAAAC,GACjB,IAAMC,EAAOD,EAAIE,OAAOC,MAAM,GAC9B,GAAIF,GAAQA,EAAKG,KAAKC,SAAS,SAAU,CACvC,IAAMC,EAAQN,EAAIE,OAAOC,MAAM,GAC/B,EAAKI,UAAS,iBAAO,CAAED,iBAEvBE,MAAM,+BACNR,EAAIE,OAAOO,MAAQ,IAjBJ,EAqBnBC,iBAAmB,SAAAV,GACjB,EAAKO,SAAS,CAAEI,KAAMX,EAAIE,OAAOO,SAtBhB,EAyBnBG,oBAAsB,SAAAC,GACpB,OAAOC,KAAKC,MAAOF,EAASG,iBAAmBH,EAASI,WAAc,MA1BrD,EA6BnBC,aAAe,WAAO,IACZZ,EAAU,EAAKa,MAAfb,MAER,GAAKA,GAAU,EAAKa,MAAMR,KAA1B,CAKA,IAAMS,EAAY,EAAKD,MAAMR,KAEVhB,EAAQ0B,IAAR,iBAAsBf,EAAMK,OAAQW,IAAIhB,GAChDiB,GACT,iBACA,SAAAV,GACE,IAAMW,EAAU,EAAKZ,oBAAoBC,GACzC,EAAKN,UAAS,iBAAO,CACnBkB,cAAc,eAAD,OAAiBD,EAAjB,YAGjB,SAAAE,GACEC,QAAQC,IAAIF,KAThB,sBAWE,4BAAAG,EAAA,sEACoBlC,EACf0B,IAAI,WACJS,MAAMxB,EAAMK,MACZoB,iBAJL,OACQC,EADR,OAMEpC,EACGyB,IADH,iBACiBD,IACda,IAAI,CAAEtB,KAAMS,EAAWY,QAAO,SAAAN,GACzBA,EACFC,QAAQC,IAAIF,GAEZ,EAAK5B,MAAMoC,cAAa,MAZhC,4CAkBF,EAAK3B,UAAS,iBAAO,CACnBD,MAAO,KACPK,KAAM,YAtCNH,MAAM,+CA9BR,EAAKW,MAAQ,CACXb,MAAO,KACPK,KAAM,GACNc,cAAe,IANA,E,sEA2EjB,OACE,yBAAKU,MAAOC,GACV,8BAAOC,KAAKlB,MAAMM,eAClB,6BACA,2BACEU,MAAOG,EACPlC,KAAK,OACLmC,SAAUF,KAAKtC,mBAEjB,6BACA,8CAEE,2BACEK,KAAK,OACLK,MAAO4B,KAAKlB,MAAMR,KAClB4B,SAAUF,KAAK3B,oBAGnB,6BACA,4BAAQyB,MAAOK,EAAcC,QAASJ,KAAKnB,cAA3C,e,GA/FkBwB,aAyGpBN,EAAgB,CACpBO,gBAAiB,WAGbH,EAAe,CACnBI,WAAY,MACZC,MAAO,QACPC,QAAS,OACTC,eAAgB,OAChBC,aAAc,MACdC,WAAY,UACZC,WAAY,QAGRZ,EAAa,CACjBa,MAAO,OACPL,QAAS,YACTM,UAAW,cC3HPC,EAAY,CAChBC,QAAS,eACTH,MAAO,QACPI,OAAQ,QACRC,OAAQ,YACRC,UAAW,SACXC,YAAa,UACbC,YAAa,QACbb,QAAS,OAGLc,EAAK,CACTH,UAAW,SACXZ,MAAO,SACPgB,SAAU,QAsBGC,MAnBf,SAAehE,GACb,OACE,yBAAKqC,MAAOkB,GACV,wBAAIlB,MAAOyB,GAAK9D,EAAMQ,MAAMK,MAE1B,yBACEwC,MAAM,QACNI,OAAO,QACPQ,IAAKjE,EAAMQ,MAAM0B,IACjBgC,IAAKlE,EAAMQ,MAAMK,OAGrB,4BAAQ8B,QAAS,kBAAM3C,EAAMmE,YAAYnE,EAAMQ,MAAMK,QAArD,uBC8CSuD,E,YAvEb,WAAYpE,GAAQ,IAAD,8BACjB,4CAAMA,KAORoC,aAAe,SAAAiC,GACTA,GAAY,EAAK5D,UAAS,iBAAO,CAAE4D,YAAY,OATlC,EAYnBC,kBAAoB,WAClB,EAAKC,yBAbY,EAgBnBC,mBAAqB,WACf,EAAKnD,MAAMgD,YACb,EAAKE,yBAlBU,EAsBnBA,sBAAwB,WACtBzE,EAASyB,IAAI,WAAWE,GAAG,SAAS,SAAAV,GAClC,IAAM0D,EAAS,GACf1D,EAAS2D,SAAQ,SAAAC,GACfF,EAAOG,KAAKD,EAAKE,UAEnB,EAAKpE,SAAS,CACZgE,OAAO,GAAD,OAAMA,GACZK,SAAS,EACTT,YAAY,QA/BC,EAoCnBF,YApCmB,uCAoCL,WAAMtD,GAAN,iBAAAkB,EAAA,+DACI,EAAKV,MAAMoD,OAAOM,MAAK,SAAAvE,GAAK,OAAIA,EAAMK,OAASA,KAAvDqB,EADI,EACJA,IADI,SAENrC,EAAQmF,WAAW9C,GAAK+C,SAFlB,OAGZnF,EAASyB,IAAT,iBAAuBV,IAAQqE,SAHnB,2CApCK,sDAEjB,EAAK7D,MAAQ,CACXoD,OAAQ,GACRJ,YAAY,GAJG,E,sEA0CT,IAAD,OACDI,EAASlC,KAAKlB,MAAMoD,OAAOU,KAAI,SAAC3E,EAAO4E,GAAR,OACnC,kBAAC,EAAD,CAAOC,IAAKD,EAAO5E,MAAOA,EAAO2D,YAAa,EAAKA,iBAGrD,OAAI5B,KAAKlB,MAAMyD,QAEX,8BACE,kBAAC,EAAD,CAAa1C,aAAcG,KAAKH,eAChC,+LAGMG,KAAKlB,MAAMyD,SAAWL,EAAOa,OAErC,8BACE,kBAAC,EAAD,CAAalD,aAAcG,KAAKH,eAChC,6BAAMqC,GAFR,KAOF,8BACE,kBAAC,EAAD,CAAarC,aAAcG,KAAKH,eAChC,gD,GAlEcQ,aCOP2C,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3E,GACLC,QAAQD,MAAMA,EAAM4E,c","file":"static/js/main.be861fb9.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/database';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDwmHjgLUTmizkk7dUFdh-MHnx4BIh0iEo\",\r\n  authDomain: \"galleryreact-be5e3.firebaseapp.com\",\r\n  databaseURL: \"https://galleryreact-be5e3.firebaseio.com\",\r\n  projectId: \"galleryreact-be5e3\",\r\n  storageBucket: \"galleryreact-be5e3.appspot.com\",\r\n  messagingSenderId: \"406751940283\",\r\n  appId: \"1:406751940283:web:74ce025c53abbd05aee39e\",\r\n  measurementId: \"G-2HFXPXJQS7\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst storage = firebase.storage();\r\nconst database = firebase.database();\r\n\r\nexport { storage, database };","import React, { Component } from \"react\";\r\nimport { storage, database } from \"../utils/firebase\";\r\n\r\nclass ImageUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      image: null,\r\n      name: \"\",\r\n      loadingStatus: \"\"\r\n    };\r\n  }\r\n\r\n  handleFileChange = evt => {\r\n    const file = evt.target.files[0];\r\n    if (file && file.type.includes(\"image\")) {\r\n      const image = evt.target.files[0];\r\n      this.setState(() => ({ image }));\r\n    } else {\r\n      alert(\"You can upload only images!\");\r\n      evt.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  handleNameChange = evt => {\r\n    this.setState({ name: evt.target.value });\r\n  };\r\n\r\n  getUploadingProcent = snapshot => {\r\n    return Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n  };\r\n\r\n  handleUpload = () => {\r\n    const { image } = this.state;\r\n\r\n    if (!image || !this.state.name) {\r\n      alert(\"Please, enter name or upload correct image\");\r\n      return;\r\n    }\r\n\r\n    const inputName = this.state.name;\r\n\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      snapshot => {\r\n        const procent = this.getUploadingProcent(snapshot);\r\n        this.setState(() => ({\r\n          loadingStatus: `Uploading - ${procent}%`\r\n        }));\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      },\r\n      async () => {\r\n        const url = await storage\r\n          .ref(\"images/\")\r\n          .child(image.name)\r\n          .getDownloadURL();\r\n\r\n        database\r\n          .ref(`images/${inputName}`)\r\n          .set({ name: inputName, url }, error => {\r\n            if (error) {\r\n              console.log(error);\r\n            } else {\r\n              this.props.handleUpdate(true);\r\n            }\r\n          });\r\n      }\r\n    );\r\n\r\n    this.setState(() => ({\r\n      image: null,\r\n      name: \"\"\r\n    }));\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={ImageUploader}>\r\n        <span>{this.state.loadingStatus}</span>\r\n        <br />\r\n        <input\r\n          style={FileLoader}\r\n          type=\"file\"\r\n          onChange={this.handleFileChange}\r\n        />\r\n        <br />\r\n        <label>\r\n          Image Title:\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleNameChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button style={UploadButton} onClick={this.handleUpload}>\r\n          Upload\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageUpload;\r\n\r\nconst ImageUploader = {\r\n  backgroundColor: \"#7BC8A1\"\r\n};\r\n\r\nconst UploadButton = {\r\n  fontWeight: \"700\",\r\n  color: \"white\",\r\n  padding: \"10px\",\r\n  textDecoration: \"none\",\r\n  borderRadius: \"3px\",\r\n  background: \"#D77206\",\r\n  transition: \"0.2s\"\r\n};\r\n\r\nconst FileLoader = {\r\n  width: \"100%\",\r\n  padding: \"12px 20px\",\r\n  boxSizing: \"border-box\"\r\n};\r\n","import React from \"react\";\r\n\r\nconst Container = {\r\n  display: \"inline-block\",\r\n  width: \"350px\",\r\n  height: \"400px\",\r\n  margin: \"20px 25px\",\r\n  textAlign: \"center\",\r\n  borderColor: \"#008a77\",\r\n  borderStyle: \"solid\",\r\n  padding: \"5px\"\r\n};\r\n\r\nconst h1 = {\r\n  textAlign: \"center\",\r\n  color: \"orange\",\r\n  fontSize: \"15px\"\r\n};\r\n\r\nfunction Image(props) {\r\n  return (\r\n    <div style={Container}>\r\n      <h1 style={h1}>{props.image.name}</h1>\r\n      {\r\n        <img\r\n          width=\"330px\"\r\n          height=\"330px\"\r\n          src={props.image.url}\r\n          alt={props.image.name}\r\n        ></img>\r\n      }\r\n      <button onClick={() => props.deleteImage(props.image.name)}>\r\n        Delete this image\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from \"react\";\r\nimport { database, storage } from \"../utils/firebase\";\r\nimport ImageUpload from \"./ImageUpload\";\r\nimport Image from \"./Image\";\r\n\r\nclass Gallery extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images: [],\r\n      needUpdate: true\r\n    };\r\n  }\r\n\r\n  handleUpdate = needUpdate => {\r\n    if (needUpdate) this.setState(() => ({ needUpdate: true }));\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getImagesFromDatabase();\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    if (this.state.needUpdate) {\r\n      this.getImagesFromDatabase();\r\n    }\r\n  };\r\n\r\n  getImagesFromDatabase = () => {\r\n    database.ref(\"images/\").on(\"value\", snapshot => {\r\n      const images = [];\r\n      snapshot.forEach(item => {\r\n        images.push(item.val());\r\n      });\r\n      this.setState({\r\n        images: [...images],\r\n        loading: false,\r\n        needUpdate: false\r\n      });\r\n    });\r\n  };\r\n\r\n  deleteImage = async name => {\r\n    const { url } = this.state.images.find(image => image.name === name);\r\n    await storage.refFromURL(url).delete();\r\n    database.ref(`images/${name}`).remove();\r\n  };\r\n\r\n  render() {\r\n    const images = this.state.images.map((image, index) => (\r\n      <Image key={index} image={image} deleteImage={this.deleteImage} />\r\n    ));\r\n\r\n    if (this.state.loading) {\r\n      return (\r\n        <main>\r\n          <ImageUpload handleUpdate={this.handleUpdate} />\r\n          <div>Загрузка картинок в процессе...</div>\r\n        </main>\r\n      );\r\n    } else if (!this.state.loading && images.length) {\r\n      return (\r\n        <main>\r\n          <ImageUpload handleUpdate={this.handleUpdate} />\r\n          <div>{images}</div>;\r\n        </main>\r\n      );\r\n    }\r\n    return (\r\n      <main>\r\n        <ImageUpload handleUpdate={this.handleUpdate} />\r\n        <div>Nothing...</div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","import React from 'react';\nimport './App.css';\nimport Gallery from './components/Gallery';\n\nfunction App() {\n  return (\n    <>\n      <Gallery />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}